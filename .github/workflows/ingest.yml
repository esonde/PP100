name: Ingest Pipeline

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  push:
    branches: [ main ]
    paths:
      - 'ingest/**'
      - '.github/workflows/ingest.yml'

concurrency:
  group: pipeline-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ingest:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ingest/requirements.txt
        
    - name: Run ingest pipeline
      id: ingest
      run: |
        echo "::group::Ingest Pipeline Execution"
        start_time=$(date +%s)
        
        # Run ingest with verbose output
        python ingest/run_ingest.py --day $(date -u +%F) --verbose 2>&1 | tee ingest.log
        
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        
        # Extract metrics from log
        echo "duration=$duration" >> $GITHUB_OUTPUT
        
        # Count interventions if file was created
        if [ -f "public/data/interventions-$(date -u +%F).parquet" ]; then
          echo "interventions_created=true" >> $GITHUB_OUTPUT
          echo "file_size=$(du -h public/data/interventions-$(date -u +%F).parquet | cut -f1)" >> $GITHUB_OUTPUT
        else
          echo "interventions_created=false" >> $GITHUB_OUTPUT
        fi
        
        echo "::endgroup::"
        
    - name: Extract job summary data
      id: summary
      run: |
        echo "::group::Extracting Summary Data"
        
        # Read manifest for status and sources
        if [ -f "public/data/manifest.json" ]; then
          manifest=$(cat public/data/manifest.json)
          echo "manifest_status=$(echo $manifest | jq -r '.status.ingest')" >> $GITHUB_OUTPUT
          echo "camera_source=$(echo $manifest | jq -r '.sources.camera // "unknown"')" >> $GITHUB_OUTPUT
          echo "senato_source=$(echo $manifest | jq -r '.sources.senato // "unknown"')" >> $GITHUB_OUTPUT
          echo "generated_at=$(echo $manifest | jq -r '.generated_at // "unknown"')" >> $GITHUB_OUTPUT
        else
          echo "manifest_status=missing" >> $GITHUB_OUTPUT
          echo "camera_source=unknown" >> $GITHUB_OUTPUT
          echo "senato_source=unknown" >> $GITHUB_OUTPUT
        fi
        
        # Extract HTTP status codes and host contacts from log
        if [ -f "ingest.log" ]; then
          # Count 304 vs 200 responses
          echo "status_304=$(grep -c '304' ingest.log || echo '0')" >> $GITHUB_OUTPUT
          echo "status_200=$(grep -c '200' ingest.log || echo '0')" >> $GITHUB_OUTPUT
          echo "status_error=$(grep -c 'Error\|ERROR' ingest.log || echo '0')" >> $GITHUB_OUTPUT
          
          # Extract host contacts
          echo "hosts_contacted=$(grep -o 'https://[^[:space:]]*' ingest.log | sort -u | wc -l)" >> $GITHUB_OUTPUT
          echo "hosts_list=$(grep -o 'https://[^[:space:]]*' ingest.log | sort -u | head -5 | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
        else
          echo "status_304=0" >> $GITHUB_OUTPUT
          echo "status_200=0" >> $GITHUB_OUTPUT
          echo "status_error=0" >> $GITHUB_OUTPUT
          echo "hosts_contacted=0" >> $GITHUB_OUTPUT
        fi
        
        echo "::endgroup::"
        
    - name: Create job summary
      run: |
        echo "## 📊 Ingest Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Execution Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.summary.outputs.manifest_status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ steps.ingest.outputs.duration }} seconds" >> $GITHUB_STEP_SUMMARY
        echo "- **Interventions Created**: ${{ steps.ingest.outputs.interventions_created }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.ingest.outputs.interventions_created }}" = "true" ]; then
          echo "- **File Size**: ${{ steps.ingest.outputs.file_size }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Network Activity" >> $GITHUB_STEP_SUMMARY
        echo "- **Hosts Contacted**: ${{ steps.summary.outputs.hosts_contacted }}" >> $GITHUB_STEP_SUMMARY
        echo "- **HTTP 200**: ${{ steps.summary.outputs.status_200 }}" >> $GITHUB_STEP_SUMMARY
        echo "- **HTTP 304 (Not Modified)**: ${{ steps.summary.outputs.status_304 }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Errors**: ${{ steps.summary.outputs.status_error }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 Sources Used" >> $GITHUB_STEP_SUMMARY
        echo "- **Camera**: ${{ steps.summary.outputs.camera_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Senato**: ${{ steps.summary.outputs.senato_source }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🕒 Last Update" >> $GITHUB_STEP_SUMMARY
        echo "- **Generated At**: ${{ steps.summary.outputs.generated_at }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.summary.outputs.hosts_list }}" != "" ]; then
          echo "### 🔗 Top Hosts Contacted" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.summary.outputs.hosts_list }}" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Validate schemas
      run: |
        python scripts/validate_schemas.py
        
    - name: Build web
      run: |
        cd web
        npm ci
        npm run build
        
    - name: Deploy to Pages
      uses: actions/deploy-pages@v4
      with:
        path: web/out
      if: success()
