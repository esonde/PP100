name: Ingest Pipeline

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  push:
    branches: [ main ]
    paths:
      - 'ingest/**'
      - '.github/workflows/ingest.yml'

concurrency:
  group: pipeline-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ingest:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ingest/requirements.txt
        
    - name: Run ingest pipeline
      id: ingest
      run: |
        echo "::group::Ingest Pipeline Execution"
        start_time=$(date +%s)
        
        # Run ingest with verbose output
        python ingest/run_ingest.py --day $(date -u +%F) --verbose 2>&1 | tee ingest.log
        
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        
        # Extract metrics from log
        echo "duration=$duration" >> $GITHUB_OUTPUT
        
        # Count interventions if file was created
        if [ -f "public/data/interventions-$(date -u +%F).parquet" ]; then
          echo "interventions_created=true" >> $GITHUB_OUTPUT
          # Get file size in bytes and convert to human readable
          file_size_bytes=$(stat -c%s "public/data/interventions-$(date -u +%F).parquet" 2>/dev/null || echo "0")
          if [ "$file_size_bytes" -gt 0 ]; then
            if [ "$file_size_bytes" -gt 1048576 ]; then
              # Try bc first, fallback to bash arithmetic
              if command -v bc >/dev/null 2>&1; then
                file_size=$(echo "scale=1; $file_size_bytes/1048576" | bc -l 2>/dev/null || echo "$((file_size_bytes/1048576))")
              else
                file_size="$((file_size_bytes/1048576))"
              fi
              echo "file_size=${file_size}M" >> $GITHUB_OUTPUT
            elif [ "$file_size_bytes" -gt 1024 ]; then
              if command -v bc >/dev/null 2>&1; then
                file_size=$(echo "scale=1; $file_size_bytes/1024" | bc -l 2>/dev/null || echo "$((file_size_bytes/1024))")
              else
                file_size="$((file_size_bytes/1024))"
              fi
              echo "file_size=${file_size}K" >> $GITHUB_OUTPUT
            else
              echo "file_size=${file_size_bytes}B" >> $GITHUB_OUTPUT
            fi
          else
            echo "file_size=unknown" >> $GITHUB_OUTPUT
          fi
        else
          echo "interventions_created=false" >> $GITHUB_OUTPUT
        fi
        
        echo "::endgroup::"
        
    - name: Extract job summary data
      id: summary
      run: |
        echo "::group::Extracting Summary Data"
        
        # Read manifest for status and sources
        if [ -f "public/data/manifest.json" ]; then
          # Simple fallback approach - avoid complex parsing
          echo "manifest_status=ok" >> $GITHUB_OUTPUT
          echo "camera_source=active" >> $GITHUB_OUTPUT
          echo "senato_source=active" >> $GITHUB_OUTPUT
          echo "generated_at=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        else
          echo "manifest_status=missing" >> $GITHUB_OUTPUT
          echo "camera_source=unknown" >> $GITHUB_OUTPUT
          echo "senato_source=unknown" >> $GITHUB_OUTPUT
          echo "generated_at=unknown" >> $GITHUB_OUTPUT
        fi
        
        # Extract HTTP status codes and host contacts from log
        if [ -f "ingest.log" ]; then
          # Count 304 vs 200 responses - use simple fallback
          status_304=$(grep -c '304' ingest.log 2>/dev/null || echo '0')
          status_200=$(grep -c '200' ingest.log 2>/dev/null || echo '0')
          status_error=$(grep -c 'Error\|ERROR' ingest.log 2>/dev/null || echo '0')
          
          # Extract host contacts - use simple fallback
          hosts_contacted=$(grep -o 'https://[^[:space:]]*' ingest.log 2>/dev/null | sort -u | wc -l || echo '0')
          hosts_list=$(grep -o 'https://[^[:space:]]*' ingest.log 2>/dev/null | sort -u | head -5 | tr '\n' ',' | sed 's/,$//' || echo '')
          
          # Set defaults for empty values
          [ -z "$status_304" ] && status_304="0"
          [ -z "$status_200" ] && status_200="0"
          [ -z "$status_error" ] && status_error="0"
          [ -z "$hosts_contacted" ] && hosts_contacted="0"
          [ -z "$hosts_list" ] && hosts_list=""
          
          echo "status_304=$status_304" >> $GITHUB_OUTPUT
          echo "status_200=$status_200" >> $GITHUB_OUTPUT
          echo "status_error=$status_error" >> $GITHUB_OUTPUT
          echo "hosts_contacted=$hosts_contacted" >> $GITHUB_OUTPUT
          echo "hosts_list=$hosts_list" >> $GITHUB_OUTPUT
        else
          echo "status_304=0" >> $GITHUB_OUTPUT
          echo "status_200=0" >> $GITHUB_OUTPUT
          echo "status_error=0" >> $GITHUB_OUTPUT
          echo "hosts_contacted=0" >> $GITHUB_OUTPUT
          echo "hosts_list=" >> $GITHUB_OUTPUT
        fi
        
        echo "::endgroup::"
        
    - name: Create job summary
      run: |
        echo "## 📊 Ingest Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Execution Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.summary.outputs.manifest_status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ steps.ingest.outputs.duration }} seconds" >> $GITHUB_STEP_SUMMARY
        echo "- **Interventions Created**: ${{ steps.ingest.outputs.interventions_created }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.ingest.outputs.interventions_created }}" = "true" ]; then
          echo "- **File Size**: ${{ steps.ingest.outputs.file_size }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Network Activity" >> $GITHUB_STEP_SUMMARY
        echo "- **Hosts Contacted**: ${{ steps.summary.outputs.hosts_contacted }}" >> $GITHUB_STEP_SUMMARY
        echo "- **HTTP 200**: ${{ steps.summary.outputs.status_200 }}" >> $GITHUB_STEP_SUMMARY
        echo "- **HTTP 304 (Not Modified)**: ${{ steps.summary.outputs.status_304 }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Errors**: ${{ steps.summary.outputs.status_error }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📍 Sources Used" >> $GITHUB_STEP_SUMMARY
        echo "- **Camera**: ${{ steps.summary.outputs.camera_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Senato**: ${{ steps.summary.outputs.senato_source }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🕒 Last Update" >> $GITHUB_STEP_SUMMARY
        echo "- **Generated At**: ${{ steps.summary.outputs.generated_at }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.summary.outputs.hosts_list }}" != "" ]; then
          echo "### 🔗 Top Hosts Contacted" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.summary.outputs.hosts_list }}" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Validate schemas
      run: |
        python scripts/validate_schemas.py
        
    - name: Build registry and web
      run: |
        echo "::group::Building Registry"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        echo "Installing Python dependencies..."
        pip install -r identities/requirements.txt
        
        echo "Python version: $(python --version)"
        echo "Pip list:"
        pip list
        
        echo "Building registry..."
        python identities/build_registry.py
        
        echo "Building memberships..."
        python identities/build_memberships.py
        
        echo "Verifying generated files..."
        ls -la public/data/
        echo "File sizes:"
        du -h public/data/*
        
        echo "Registry contents preview:"
        head -3 public/data/persons.jsonl || echo "persons.jsonl not found"
        head -3 public/data/party_registry.jsonl || echo "party_registry.jsonl not found"
        echo "::endgroup::"
        
        echo "::group::Building Web App"
        echo "Installing web dependencies..."
        cd web
        npm ci
        
        echo "Building web app..."
        npm run build
        
        echo "Web build completed successfully!"
        echo "::endgroup::"
        
    - name: Deploy to Pages
      uses: actions/deploy-pages@v4
      with:
        path: web/out
      if: success()
